// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class BetEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("name", Value.fromString(""));
    this.set("deadline", Value.fromBigInt(BigInt.zero()));
    this.set("choiceOne", Value.fromBytes(Bytes.empty()));
    this.set("choiceTwo", Value.fromBytes(Bytes.empty()));
    this.set("betMaster", Value.fromBytes(Bytes.empty()));
    this.set("pundit", Value.fromBytesArray(new Array(0)));
    this.set("totalNOB", Value.fromBigInt(BigInt.zero()));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save BetEvent entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save BetEvent entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("BetEvent", id.toString(), this);
    }
  }

  static load(id: string): BetEvent | null {
    return changetype<BetEvent | null>(store.get("BetEvent", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get privateOrPublic(): i32 {
    let value = this.get("privateOrPublic");
    return value!.toI32();
  }

  set privateOrPublic(value: i32) {
    this.set("privateOrPublic", Value.fromI32(value));
  }

  get name(): string {
    let value = this.get("name");
    return value!.toString();
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get deadline(): BigInt {
    let value = this.get("deadline");
    return value!.toBigInt();
  }

  set deadline(value: BigInt) {
    this.set("deadline", Value.fromBigInt(value));
  }

  get choiceOne(): Bytes {
    let value = this.get("choiceOne");
    return value!.toBytes();
  }

  set choiceOne(value: Bytes) {
    this.set("choiceOne", Value.fromBytes(value));
  }

  get choiceTwo(): Bytes {
    let value = this.get("choiceTwo");
    return value!.toBytes();
  }

  set choiceTwo(value: Bytes) {
    this.set("choiceTwo", Value.fromBytes(value));
  }

  get choiceThree(): Bytes | null {
    let value = this.get("choiceThree");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set choiceThree(value: Bytes | null) {
    if (!value) {
      this.unset("choiceThree");
    } else {
      this.set("choiceThree", Value.fromBytes(<Bytes>value));
    }
  }

  get choiceFour(): Bytes | null {
    let value = this.get("choiceFour");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set choiceFour(value: Bytes | null) {
    if (!value) {
      this.unset("choiceFour");
    } else {
      this.set("choiceFour", Value.fromBytes(<Bytes>value));
    }
  }

  get correctChoice(): i32 {
    let value = this.get("correctChoice");
    return value!.toI32();
  }

  set correctChoice(value: i32) {
    this.set("correctChoice", Value.fromI32(value));
  }

  get betMaster(): Bytes {
    let value = this.get("betMaster");
    return value!.toBytes();
  }

  set betMaster(value: Bytes) {
    this.set("betMaster", Value.fromBytes(value));
  }

  get pundit(): Array<Bytes> {
    let value = this.get("pundit");
    return value!.toBytesArray();
  }

  set pundit(value: Array<Bytes>) {
    this.set("pundit", Value.fromBytesArray(value));
  }

  get amount(): BigInt | null {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt | null) {
    if (!value) {
      this.unset("amount");
    } else {
      this.set("amount", Value.fromBigInt(<BigInt>value));
    }
  }

  get totalNOB(): BigInt {
    let value = this.get("totalNOB");
    return value!.toBigInt();
  }

  set totalNOB(value: BigInt) {
    this.set("totalNOB", Value.fromBigInt(value));
  }

  get profit(): BigInt | null {
    let value = this.get("profit");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set profit(value: BigInt | null) {
    if (!value) {
      this.unset("profit");
    } else {
      this.set("profit", Value.fromBigInt(<BigInt>value));
    }
  }

  get executed(): boolean {
    let value = this.get("executed");
    return value!.toBoolean();
  }

  set executed(value: boolean) {
    this.set("executed", Value.fromBoolean(value));
  }
}
